#!/usr/bin/env lua

--TODO find a better way around this
--package.path = package.path .. ";/home/gregwar/git/extending_typed_lua/my_typed_lua/?.lua"

local tlast = require "typedlua.tlast"
local tlparser = require "typedlua.tlparser"
local tlchecker = require "typedlua.tlchecker"
local tlcode = require "typedlua.tlcode"

local VERSION = "scm"
local PROGNAME = "tlc"
local OUTPUT

local DUMPAST = false
local PRINTAST = false

local COLOR = false
local STRICT = false
local WARNINGS = false
local INTEGER = false
if _VERSION == "Lua 5.3" then INTEGER = true end

local progname = PROGNAME

local USAGE = [[
usage: %s [options] [filename]
Available options are:
-h       print this help
-d name  dump the AST (after typechecking) to file 'name'
-o name  output to file 'name' (default is '%s')
-c       ansi colors on
-p       print the AST in Metalua format (before typechecking)
-s       strict mode on
-v       print current version
-w       warnings on (consistent-subtyping, unused locals)
]]

local function usage (msg)
  if msg then
    io.stderr:write(string.format("%s: %s\n", progname, msg))
  end
  io.stderr:write(string.format(USAGE, progname, "tlc.lua"))
  os.exit(1)
end

local forced_filename

local function doargs ()
  local i = 1
  while i <= #arg do
    if string.find(arg[i], "^-") == nil then
      return i
    else
      if arg[i] == "--filename" then
        i = i + 1
        forced_filename = arg[i]
      else
        for j = 2, #arg[i] do
          local option_char = arg[i]:sub(j, j)
          if option_char == "d" then
            if j ~= #arg[i] then
              usage("'-d' appears last in option block")
            end
            i = i + 1
            if arg[i] == nil or string.find(arg[i], "^-") then
              usage("'-d' needs argument")
            else
              DUMPAST = arg[i]
              break
            end
          elseif option_char == "h" then
            usage()
          elseif option_char == "o" then
            if j ~= #arg[i] then
              usage("'-o' appears last in option block")
            end
            i = i + 1
            if arg[i] == nil or string.find(arg[i], "^-") then
              usage("'-o' needs argument")
            else
              OUTPUT = arg[i]
              break
            end
          elseif option_char == "c" then
            COLOR = true
          elseif option_char == "p" then
            PRINTAST = true
          elseif option_char == "s" then
            STRICT = true
          elseif option_char == "v" then
            io.write(string.format("Typed Lua %s\n", VERSION))
            os.exit(0)
          elseif option_char == "w" then
            WARNINGS = true
          else
            usage(string.format("'%s' unknown option", arg[i]))
          end
        end
      end
    end

    i = i + 1
  end
  return i
end

local function getcontents (filename)
  if filename == "stdin" then
    local contents = io.stdin:read("*a")
    return contents
  end
  local file = assert(io.open(filename, "r"))
  local contents = file:read("*a")
  file:close()
  return contents
end

local function setcontents (contents, filename)
  local file = assert(io.open(filename, "w"))
  file:write(contents)
  file:write("\n")
  file:close()
end

local i = doargs()
local filename = arg[i]
if not filename then
  usage("no input file given")
end

if i < #arg then
  io.stderr:write(string.format("%s: Ignored extra arguments (%s)\n", progname, table.concat(arg, ", ", i+1, #arg)))
end

if not OUTPUT then
  local name_part = filename:match("(.*)[.]tl$") or "tlc"
  OUTPUT = name_part .. ".lua"
end

local subject = getcontents(filename)

local true_filename = filename == "stdin" and forced_filename or filename
local ast, error_msg = tlparser.parse(subject, true_filename, STRICT, INTEGER)
if not ast then
  print(error_msg)
  os.exit(1)
end

if PRINTAST then
  print(tlast.tostring(ast))
end

error_msg = tlchecker.typecheck(ast, subject, true_filename, STRICT, INTEGER, COLOR)
local status
error_msg, status = tlchecker.error_msgs(error_msg, WARNINGS, COLOR, filename ~= "stdin")
if error_msg then print(error_msg) end

if status == 0  and filename ~= "stdin" then
  local generated_code = tlcode.generate(ast)
  setcontents(generated_code, OUTPUT)
end

if DUMPAST then
  local out = assert(io.open(DUMPAST, "w+"))
  out:write("return ")
  tlast.dump(out, ast)
end

os.exit(status)
